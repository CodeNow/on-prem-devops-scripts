---
- name: load variables for krain
  include_vars: "group_vars/alpha-krain.yml"

- name: create new config file for krain
  template:
    src=upstart.conf
    dest=~/{{ app_name }}.conf
    backup=yes
  vars:
    - app_name: "krain"
    - environment_vars: environment_vars

# this requires the use of gnu/coreutils base64 (`brew install coreutils`)
# Allows us to use same base64 locally and in host
- name: encode krain config to base64
  shell: cat ~/{{ app_name }}.conf | base64 -w 0
  register: krain_base64
  vars:
    - app_name: "krain"

- name: load variables for charon
  include_vars: "group_vars/alpha-charon.yml"

- name: create new config file for charon
  template:
    src=upstart.conf
    dest=~/{{ app_name }}.conf
    backup=yes
  vars:
    - app_name: "charon"
    - environment_vars: environment_vars

# this requires the use of gnu/coreutils base64 (`brew install coreutils`)
# Allows us to use same base64 locally and in host
- name: encode charon config to base64
  shell: cat ~/{{ app_name }}.conf | base64 -w 0
  register: charon_base64
  vars:
    - app_name: "charon"

- name: register tokens
  set_fact:
    vault_tokens:
    - { file_name: 'auth-token', value: "{{ vault_auth_token }}" }
    - { file_name: 'token-01', value: "{{ vault_token_01 }}" }
    - { file_name: 'token-02', value: "{{ vault_token_02 }}" }
    - { file_name: 'token-03', value: "{{ vault_token_03 }}" }

- name: encode ca.pem to base64
  shell: cat ./certs/ca.pem | base64 -w 0
  register: ca_pem_base64

- name: encode ca-key.pem to base64
  shell: cat ./certs/ca-key.pem | base64 -w 0
  register: ca_key_pem_base64

- name: encode pass to base64
  shell: cat ./certs/pass | base64 -w 0
  register: pass_base64

- name: load variables for ecr-auto-login
  when: aws_ecr_access_key is defined and aws_ecr_secret_key is defined
  include_vars: "group_vars/alpha-ecr-auto-login.yml"

- name: Render docker run command for ECR docker login
  when: aws_ecr_access_key is defined and aws_ecr_secret_key is defined
  set_fact:
    ecr_auto_login_docker_command: "docker run {{ container_run_opts }} {{ container_image }}:{{ container_tag }}"

- name: Generate dock script
  template:
    src=init.tmpl
    dest=~/dock-{{ environment }}.sh
  vars:
    tokens: "{{ vault_tokens }}"
    is_dock_pool: false

- name: Generate dock script
  template:
    src=init.tmpl
    dest=~/dock-pool-{{ environment }}.sh
  vars:
    tokens: "{{ vault_tokens }}"
    is_dock_pool: true
